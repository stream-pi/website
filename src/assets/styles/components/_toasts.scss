@import "~react-toastify/dist/ReactToastify.css";
// ^^ override toast classes in the file above ^^

@mixin displayed-toast(
  $colorName,
  $backgroundColorValue,
  $borderColorValue,
  $colorValue
) {
  @include alert-variant($backgroundColorValue, $borderColorValue, $colorValue);
  @extend .alert;
  @extend .alert-#{$colorName};
  // @extend .shadow-sm;
}

@mixin toast-color-classes($className, $colorName, $colorValue) {
  &__toast--#{$className} {
    @include displayed-toast(
      $colorName,
      shift-color(map-get($theme-colors, $colorName), $alert-bg-scale),
      shift-color(map-get($theme-colors, $colorName), $alert-border-scale),
      shift-color(map-get($theme-colors, $colorName), $alert-color-scale)
    );
  }
  &__close-button {
    &--#{$className} {
      color: shift-color(map-get($theme-colors, $colorName), $alert-color-scale);
    }
  }
  &__progress-bar {
    &--#{$className} {
      background-color: rgba($colorValue, 0.2);
    }
  }
}

//generate toast classes
.Toastify {
  &__close-button {
    padding: 0.25rem 0.5rem;
    margin-top: -0.5rem;
    margin-right: -1rem;
  }
  &__progress-bar {
    height: 0.2rem;
  }

  //each alert color: "info", "success", "error", "warning", etc...
  @each $color, $value in $theme-colors {
    // "danger" is bootstrap color, "error" is react-toastify color.
    // use "error" for classnames, but bootstrap color
    @if ($color == "danger") {
      @include toast-color-classes("error", $color, $value);
    } @else if ($color == "primary") {
      @include toast-color-classes("default", $color, $value);
    }
    // all others have the same naming convention
    @else {
      @include toast-color-classes($color, $color, $value);
    }
  }

  //change container width depending on screensize
  &__toast-container {
    @media only screen and (min-width: map-get($grid-breakpoints, "xs" )) {
      width: 100%;
      padding: 4px;

      &--top-center {
        top: calc(60px + 0.25rem);
        left: 0%;
        transform: translateX(0%);
      }
      &--bottom-center {
        //bottom: 1em;
        left: 0%;
        transform: translateX(0%);
      }
    }

    @media only screen and (min-width: map-get($grid-breakpoints, "sm" )) {
      width: 75%;
      &--top-center {
        //top: 1em;
        left: 25%;
        transform: translateX(-17.5%);
      }
      &--bottom-center {
        //bottom: 1em;
        left: 25%;
        transform: translateX(-17.5%);
      }
    }

    @media only screen and (min-width: map-get($grid-breakpoints, "md" )) {
      width: auto;
      min-width: 320px;
      &--top-center {
        //top: 1em;
        left: 50%;
        transform: translateX(-50%);
      }
      &--bottom-center {
        //bottom: 1em;
        left: 50%;
        transform: translateX(-50%);
      }
    }
  }
}
